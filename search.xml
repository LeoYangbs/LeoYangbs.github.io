<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Json-lib 性能测试</title>
      <link href="/2018/11/27/Json-lib%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/11/27/Json-lib%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="Json-lib-性能测试"><a href="#Json-lib-性能测试" class="headerlink" title="Json-lib 性能测试"></a>Json-lib 性能测试</h1><blockquote><p>本文基于 JMH套件, 针对常见的序列化组件, 比对其相应的序列化与反序列化性能.<a id="more"></a></p></blockquote><p>相关测试参数:</p><ul><li>测试样本大小1000</li><li>CPU: Intel Core i5-6440HQ</li><li>RAM: 16 GB</li><li>JVM: 1.8.0_60</li><li>OS: Win10</li></ul><p>Json-lib对比范围:</p><ul><li>gson</li><li>fastjson</li><li>jackson</li></ul><hr><p>JMH 相关细节:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Param</span>(&#123;<span class="string">"fastJson"</span>, <span class="string">"jackson"</span>, <span class="string">"gson"</span>&#125;)</span><br><span class="line">  <span class="keyword">private</span> String jsonLib;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Setup</span>(Level.Trial)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (jsonLib) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"fastJson"</span>:</span><br><span class="line">              baseSerializer = <span class="keyword">new</span> FastjsonSerializer();</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"jackson"</span>:</span><br><span class="line">              baseSerializer = <span class="keyword">new</span> JacksonSerializer();</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">"gson"</span>:</span><br><span class="line">              baseSerializer = <span class="keyword">new</span> GsonSerializer();</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">@Benchmark</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> baseSerializer.serialize(serializeObj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Benchmark</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> baseSerializer.deserialize(deserializeObj, Message.class);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>序列化,反序列化对象构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Message&gt; serializeObj;</span><br><span class="line"><span class="keyword">private</span> String deserializeObj;</span><br><span class="line"><span class="keyword">private</span> BaseSerializer baseSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setup</span>(Level.Iteration)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    AtomicLong ids = <span class="keyword">new</span> AtomicLong(<span class="number">10000000l</span>);</span><br><span class="line">    ArrayList&lt;Double&gt; doubles = <span class="keyword">new</span> ArrayList&lt;Double&gt;() &#123;&#123;add(<span class="number">103</span>D); add(<span class="number">104</span>D);&#125;&#125;;</span><br><span class="line">    serializeObj = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        InnerMessage innerMessage = InnerMessage.builder().name(<span class="string">"inner name"</span>).build();</span><br><span class="line">        Message message = Message.builder().strObj(<span class="string">"outer"</span>).floatObj(<span class="number">102f</span>).doubleObjList(doubles).boolObj(Boolean.TRUE).bytesObj(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).int32Obj(<span class="number">32</span>).int64Obj(<span class="number">64</span>).innerMessageObj(innerMessage).createDate(date).id(ids.getAndIncrement()).build();</span><br><span class="line">        serializeObj.add(message);</span><br><span class="line">    &#125;</span><br><span class="line">    deserializeObj = JSON.toJSONString(serializeObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细代码: <a href="https://github.com/LeoYangbs/Java-Jsonlib-Compare" target="_blank" rel="noopener">https://github.com/LeoYangbs/Java-Jsonlib-Compare</a></p><p>测试结果:</p><hr><p><img src="/images/json_lib_result.png" alt="json_lib_result"></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql 添加索引的性能影响</title>
      <link href="/2018/11/01/Mysql%20%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%9A%84%E6%80%A7%E8%83%BD%E5%BD%B1%E5%93%8D/"/>
      <url>/2018/11/01/Mysql%20%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%9A%84%E6%80%A7%E8%83%BD%E5%BD%B1%E5%93%8D/</url>
      <content type="html"><![CDATA[<p>#Mysql 添加索引的性能影响</p><blockquote><p>索引的添加会优化查询性能,但是过多的索引会带来显著的性能消耗,本文从两方面展开:</p><ol><li>过多的索引产生的性能问题</li><li>添加索引对于数据库系统整体的影响<a id="more"></a></li></ol></blockquote><p>chapter1: 过多的索引产生的性能问题 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 示例表结构</span><br><span class="line">CREATE TABLE album (</span><br><span class="line">  id bigint(20) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">  artist_id int(10) unsigned NOT NULL,</span><br><span class="line">  album_type_id int(10) unsigned NOT NULL,</span><br><span class="line">  name varchar(255) NOT NULL,</span><br><span class="line">  first_released year(4) NOT NULL,</span><br><span class="line">  country_id smallint(5) unsigned DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id),</span><br><span class="line">  KEY artist_id (artist_id),</span><br><span class="line">  KEY country_id (country_id),</span><br><span class="line">  KEY album_type_id (album_type_id),</span><br><span class="line">  KEY m1 (country_id,album_type_id),</span><br><span class="line">  KEY m2 (album_type_id,country_id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT  CHARSET=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 批量写入耗时数据</span><br><span class="line"># Insert with indexes</span><br><span class="line">Query OK, 553875 rows affected (24.77 sec)</span><br><span class="line">-- 删去多余索引</span><br><span class="line"># ALTER TABLE album DROP INDEX artist_id, DROP INDEX country_id,DROP INDEX album_type_id, DROP INDEX m1, DROP INDEX m2;</span><br><span class="line"># Insert without indexes</span><br><span class="line">Query OK, 553875 rows affected (7.14 sec)</span><br></pre></td></tr></table></figure><p>小结: 在删去冗余索引的情况下,写入速度提升了近四倍. 过多的索引会带来过多的IO开销,影响DML语句性能.</p><h4 id="chapter2-添加索引对于数据库系统整体的影响"><a href="#chapter2-添加索引对于数据库系统整体的影响" class="headerlink" title="chapter2: 添加索引对于数据库系统整体的影响"></a>chapter2: 添加索引对于数据库系统整体的影响</h4> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE xx ADD INDEX  ..</span><br><span class="line"></span><br><span class="line">ALTER TABLE 语义一般涉及到创建新表,读取与写入数据,因而是带有阻塞性质的,执行DML语句会发生阻塞,当表数据量很大时一定要慎用ALTER TABLE 语义. 新版本的Mysql对此做了优化, 对于大表的操作依然需要关注RDS的硬件冗余指标.</span><br></pre></td></tr></table></figure><p> 结论: 索引设计应在兼顾性能的条件下力求减少索引数目, 以不超过5个为宜;局部的改动应考虑到对于整体的影响.</p><p>参考书籍:  数据库索引设计与优化</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
