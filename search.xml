<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Json-lib 性能测试]]></title>
    <url>%2F2018%2F11%2F27%2FJson-Lib%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[Json-lib 性能测试 本文基于 JMH套件, 针对常见的序列化组件, 比对其相应的序列化与反序列化性能. 相关测试参数: 测试样本大小1000 CPU: Intel Core i5-6440HQ RAM: 16 GB JVM: 1.8.0_60 OS: Win10 Json-lib对比范围: gson fastjson jackson JMH 相关细节: 1234567891011121314151617181920212223242526 @Param(&#123;"fastJson", "jackson", "gson"&#125;) private String jsonLib; @Setup(Level.Trial) public void preInit() &#123; switch (jsonLib) &#123; case "fastJson": baseSerializer = new FastjsonSerializer(); break; case "jackson": baseSerializer = new JacksonSerializer(); break; case "gson": baseSerializer = new GsonSerializer(); break; &#125; &#125;@Benchmark public String serialize() &#123; return baseSerializer.serialize(serializeObj); &#125; @Benchmark public Object deserialize() &#123; return baseSerializer.deserialize(deserializeObj, Message.class); &#125; 序列化,反序列化对象构建 1234567891011121314151617private List&lt;Message&gt; serializeObj;private String deserializeObj;private BaseSerializer baseSerializer;@Setup(Level.Iteration)public void prepare() &#123; Date date = new Date(); AtomicLong ids = new AtomicLong(10000000l); ArrayList&lt;Double&gt; doubles = new ArrayList&lt;Double&gt;() &#123;&#123;add(103D); add(104D);&#125;&#125;; serializeObj = new ArrayList&lt;&gt;(1000); for (int i = 0; i &lt; 1000; i++) &#123; InnerMessage innerMessage = InnerMessage.builder().name("inner name").build(); Message message = Message.builder().strObj("outer").floatObj(102f).doubleObjList(doubles).boolObj(Boolean.TRUE).bytesObj(new byte[]&#123;1, 2, 3&#125;).int32Obj(32).int64Obj(64).innerMessageObj(innerMessage).createDate(date).id(ids.getAndIncrement()).build(); serializeObj.add(message); &#125; deserializeObj = JSON.toJSONString(serializeObj);&#125; 测试结果:]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JMH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 添加索引的性能影响]]></title>
    <url>%2F2018%2F11%2F01%2FMysql%20%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%E7%9A%84%E6%80%A7%E8%83%BD%E5%BD%B1%E5%93%8D%2F</url>
    <content type="text"><![CDATA[#Mysql 添加索引的性能影响 索引的添加会优化查询性能,但是过多的索引会带来显著的性能消耗,本文从两方面展开: 过多的索引产生的性能问题 添加索引对于数据库系统整体的影响 chapter1: 过多的索引产生的性能问题 123456789101112131415-- 示例表结构CREATE TABLE album ( id bigint(20) NOT NULL AUTO_INCREMENT , artist_id int(10) unsigned NOT NULL, album_type_id int(10) unsigned NOT NULL, name varchar(255) NOT NULL, first_released year(4) NOT NULL, country_id smallint(5) unsigned DEFAULT NULL, PRIMARY KEY (id), KEY artist_id (artist_id), KEY country_id (country_id), KEY album_type_id (album_type_id), KEY m1 (country_id,album_type_id), KEY m2 (album_type_id,country_id)) ENGINE=InnoDB DEFAULT CHARSET=utf8; 1234567-- 批量写入耗时数据# Insert with indexesQuery OK, 553875 rows affected (24.77 sec)-- 删去多余索引# ALTER TABLE album DROP INDEX artist_id, DROP INDEX country_id,DROP INDEX album_type_id, DROP INDEX m1, DROP INDEX m2;# Insert without indexesQuery OK, 553875 rows affected (7.14 sec) 小结: 在删去冗余索引的情况下,写入速度提升了近四倍. 过多的索引会带来过多的IO开销,影响DML语句性能. chapter2: 添加索引对于数据库系统整体的影响 123ALTER TABLE xx ADD INDEX ..ALTER TABLE 语义一般涉及到创建新表,读取与写入数据,因而是带有阻塞性质的,执行DML语句会发生阻塞,当表数据量很大时一定要慎用ALTER TABLE 语义. 新版本的Mysql对此做了优化, 对于大表的操作依然需要关注RDS的硬件冗余指标. 结论: 索引设计应在兼顾性能的条件下力求减少索引数目, 以不超过5个为宜;局部的改动应考虑到对于整体的影响. 参考书籍: 数据库索引设计与优化]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
</search>
