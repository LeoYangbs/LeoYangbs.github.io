{"meta":{"title":"OKClub","subtitle":"Time is running..","description":null,"author":null,"url":"http://okclub.online"},"pages":[{"title":"关于","date":"2018-08-25T04:21:12.000Z","updated":"2018-08-25T07:44:25.608Z","comments":true,"path":"about/index.html","permalink":"http://okclub.online/about/index.html","excerpt":"","text":"站点定位 关注 技术 读书 思考. 个人信息 LeoYang 工作年限：3年 技术博客：https://okclub.online/ Github：https://github.com/LeoYangbs 城市：北京 工作: 互联网金融行业 衍生品交易所 Senior Dev wechat: bossyangwx one word: 保持心智的敏锐, 幸福生活."},{"title":"标签","date":"2018-08-25T04:56:16.000Z","updated":"2018-08-25T07:25:00.911Z","comments":true,"path":"tags/index.html","permalink":"http://okclub.online/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-08-25T04:57:27.000Z","updated":"2018-08-25T07:24:41.414Z","comments":true,"path":"categories/index.html","permalink":"http://okclub.online/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Json-lib 性能测试","slug":"Json-lib 性能测试","date":"2018-11-27T08:28:46.000Z","updated":"2018-11-27T09:04:10.188Z","comments":true,"path":"2018/11/27/Json-lib 性能测试/","link":"","permalink":"http://okclub.online/2018/11/27/Json-lib 性能测试/","excerpt":"Json-lib 性能测试 本文基于 JMH套件, 针对常见的序列化组件, 比对其相应的序列化与反序列化性能.","text":"Json-lib 性能测试 本文基于 JMH套件, 针对常见的序列化组件, 比对其相应的序列化与反序列化性能. 相关测试参数: 测试样本大小1000 CPU: Intel Core i5-6440HQ RAM: 16 GB JVM: 1.8.0_60 OS: Win10 Json-lib对比范围: gson fastjson jackson JMH 相关细节: 1234567891011121314151617181920212223242526 @Param(&#123;\"fastJson\", \"jackson\", \"gson\"&#125;) private String jsonLib; @Setup(Level.Trial) public void preInit() &#123; switch (jsonLib) &#123; case \"fastJson\": baseSerializer = new FastjsonSerializer(); break; case \"jackson\": baseSerializer = new JacksonSerializer(); break; case \"gson\": baseSerializer = new GsonSerializer(); break; &#125; &#125;@Benchmark public String serialize() &#123; return baseSerializer.serialize(serializeObj); &#125; @Benchmark public Object deserialize() &#123; return baseSerializer.deserialize(deserializeObj, Message.class); &#125; 序列化,反序列化对象构建 1234567891011121314151617private List&lt;Message&gt; serializeObj;private String deserializeObj;private BaseSerializer baseSerializer;@Setup(Level.Iteration)public void prepare() &#123; Date date = new Date(); AtomicLong ids = new AtomicLong(10000000l); ArrayList&lt;Double&gt; doubles = new ArrayList&lt;Double&gt;() &#123;&#123;add(103D); add(104D);&#125;&#125;; serializeObj = new ArrayList&lt;&gt;(1000); for (int i = 0; i &lt; 1000; i++) &#123; InnerMessage innerMessage = InnerMessage.builder().name(\"inner name\").build(); Message message = Message.builder().strObj(\"outer\").floatObj(102f).doubleObjList(doubles).boolObj(Boolean.TRUE).bytesObj(new byte[]&#123;1, 2, 3&#125;).int32Obj(32).int64Obj(64).innerMessageObj(innerMessage).createDate(date).id(ids.getAndIncrement()).build(); serializeObj.add(message); &#125; deserializeObj = JSON.toJSONString(serializeObj);&#125; 详细代码: https://github.com/LeoYangbs/Java-Jsonlib-Compare 测试结果:","categories":[{"name":"技术","slug":"技术","permalink":"http://okclub.online/categories/技术/"}],"tags":[{"name":"JMH","slug":"JMH","permalink":"http://okclub.online/tags/JMH/"}]},{"title":"Mysql 添加索引的性能影响","slug":"Mysql 添加索引的性能影响","date":"2018-11-01T01:51:17.431Z","updated":"2018-11-01T02:11:41.822Z","comments":true,"path":"2018/11/01/Mysql 添加索引的性能影响/","link":"","permalink":"http://okclub.online/2018/11/01/Mysql 添加索引的性能影响/","excerpt":"#Mysql 添加索引的性能影响 索引的添加会优化查询性能,但是过多的索引会带来显著的性能消耗,本文从两方面展开: 过多的索引产生的性能问题 添加索引对于数据库系统整体的影响","text":"#Mysql 添加索引的性能影响 索引的添加会优化查询性能,但是过多的索引会带来显著的性能消耗,本文从两方面展开: 过多的索引产生的性能问题 添加索引对于数据库系统整体的影响 chapter1: 过多的索引产生的性能问题 123456789101112131415-- 示例表结构CREATE TABLE album ( id bigint(20) NOT NULL AUTO_INCREMENT , artist_id int(10) unsigned NOT NULL, album_type_id int(10) unsigned NOT NULL, name varchar(255) NOT NULL, first_released year(4) NOT NULL, country_id smallint(5) unsigned DEFAULT NULL, PRIMARY KEY (id), KEY artist_id (artist_id), KEY country_id (country_id), KEY album_type_id (album_type_id), KEY m1 (country_id,album_type_id), KEY m2 (album_type_id,country_id)) ENGINE=InnoDB DEFAULT CHARSET=utf8; 1234567-- 批量写入耗时数据# Insert with indexesQuery OK, 553875 rows affected (24.77 sec)-- 删去多余索引# ALTER TABLE album DROP INDEX artist_id, DROP INDEX country_id,DROP INDEX album_type_id, DROP INDEX m1, DROP INDEX m2;# Insert without indexesQuery OK, 553875 rows affected (7.14 sec) 小结: 在删去冗余索引的情况下,写入速度提升了近四倍. 过多的索引会带来过多的IO开销,影响DML语句性能. chapter2: 添加索引对于数据库系统整体的影响 123ALTER TABLE xx ADD INDEX ..ALTER TABLE 语义一般涉及到创建新表,读取与写入数据,因而是带有阻塞性质的,执行DML语句会发生阻塞,当表数据量很大时一定要慎用ALTER TABLE 语义. 新版本的Mysql对此做了优化, 对于大表的操作依然需要关注RDS的硬件冗余指标. 结论: 索引设计应在兼顾性能的条件下力求减少索引数目, 以不超过5个为宜;局部的改动应考虑到对于整体的影响. 参考书籍: 数据库索引设计与优化","categories":[{"name":"技术","slug":"技术","permalink":"http://okclub.online/categories/技术/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://okclub.online/tags/Mysql/"}]}]}